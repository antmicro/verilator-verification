#!/usr/bin/env python3

from jinja2 import Template
from glob import glob
import sys
import os

repo_dir = os.path.dirname(sys.argv[0])
tmpl_dir = repo_dir + '/templates'
test_dir = repo_dir + '/tests'

with open(tmpl_dir + '/suite.robot', 'r') as t:
    suite_tmpl = Template(t.read())

with open(tmpl_dir + '/default.robot', 'r') as t:
    default_tmpl = Template(t.read())

branch_filter = sys.argv[1:]
branches = os.listdir(repo_dir + '/verilator')
test_suites = os.listdir(test_dir)
suite_to_branch = { suite: suite if suite in branches else 'master' for suite in test_suites }

print('Generating:    (suite -> branch)')
for suite in test_suites:
    branch = suite_to_branch[suite]
    if len(branch_filter) > 0 and branch not in branch_filter:
        continue
    print('   ', suite, '->', branch)

    test_cases = []
    template = default_tmpl
    tmpl_path = tmpl_dir + '/' + suite + '.robot'
    if os.path.exists(tmpl_path):
        with open(tmpl_path, 'r') as t:
            template = Template(t.read())

    for test in sorted(glob(test_dir + '/' + suite + '/*')):
        test = os.path.basename(test)
        test = os.path.splitext(test)[0]
        os.makedirs('out/' + suite + '/' + test, exist_ok=True)
        test_cases.append(template.render(verilator_root='verilator/' + branch, test_suite=suite, test=test, tags="Branch: " + branch))

    with open(suite + '.robot', 'w') as t:
        t.write(suite_tmpl.render(test_cases='\n'.join(test_cases)))
